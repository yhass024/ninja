{"version":3,"sources":["ninjas.js","AddNinja.js","App.js","serviceWorker.js","index.js"],"names":["Ninjas","ninjas","deleteNinja","ninjaList","map","ninja","age","className","key","id","name","belt","onClick","AddNinja","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","newNinja","onSubmit","this","htmlFor","type","onChange","React","Component","App","Math","random","ninjas1","filter","console","log","prevProp","prevState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8OAyBeA,EAvBA,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,YAClBC,EAAYF,EAAOG,KAAI,SAACC,GAC5B,OAAIA,EAAMC,IAAM,GAEZ,yBAAKC,UAAU,QAAQC,IAAKH,EAAMI,IAChC,uCAAaJ,EAAMK,MACnB,sCAAYL,EAAMC,KAClB,uCAAaD,EAAMM,MACnB,4BACEC,QAAS,WACPV,EAAYG,EAAMI,MAFtB,UAOA,8BAGQ,QAEhB,OAAO,yBAAKF,UAAU,cAAcJ,I,OCOvBU,E,4MA1BbC,MAAQ,CAAEJ,KAAM,KAAMJ,IAAK,KAAMK,KAAM,M,EACvCI,aAAe,SAACC,GACd,EAAKC,SAAL,eAAiBD,EAAEE,OAAOT,GAAKO,EAAEE,OAAOC,S,EAE1CC,aAAe,SAACJ,GACdA,EAAEK,iBACF,EAAKC,MAAMC,SAAS,EAAKT,Q,uDAGzB,OACE,6BACE,6CACA,0BAAMU,SAAUC,KAAKL,cACnB,2BAAOM,QAAQ,QAAf,UACA,2BAAOC,KAAK,OAAOlB,GAAG,OAAOmB,SAAUH,KAAKV,eAC5C,2BAAOW,QAAQ,QAAf,SACA,2BAAOC,KAAK,OAAOlB,GAAG,MAAMmB,SAAUH,KAAKV,eAC3C,2BAAOW,QAAQ,QAAf,UACA,2BAAOC,KAAK,OAAOlB,GAAG,OAAOmB,SAAUH,KAAKV,eAC5C,gD,GApBac,IAAMC,WCyCdC,E,4MAtCbjB,MAAQ,CACNb,OAAQ,CACN,CAAES,KAAM,MAAOJ,IAAK,GAAIK,KAAM,QAASF,GAAI,GAC3C,CAAEC,KAAM,QAASJ,IAAK,GAAIK,KAAM,QAASF,GAAI,GAC7C,CAAEC,KAAM,QAASJ,IAAK,GAAIK,KAAM,SAAUF,GAAI,K,EAGlDc,SAAW,SAAClB,GACVA,EAAMI,GAAKuB,KAAKC,SAChB,IAAIhC,EAAM,sBAAO,EAAKa,MAAMb,QAAlB,CAA0BI,IACpC,EAAKY,SAAS,CAAEhB,OAAQA,K,EAG1BC,YAAc,SAACO,GACb,IAAIyB,EAAU,EAAKpB,MAAMb,OAAOkC,QAAO,SAAC9B,GACtC,OAAOA,EAAMI,KAAOA,KAEtB,EAAKQ,SAAS,CAAEhB,OAAQiC,K,kEAGxBE,QAAQC,IAAI,uB,yCAEKC,EAAUC,GAC3BH,QAAQC,IAAI,qBACZD,QAAQC,IAAIC,EAAUC,K,+BAGtB,OACE,yBAAKhC,UAAU,OACb,8CACA,4CACA,kBAAC,EAAD,CAAQN,OAAQwB,KAAKX,MAAMb,OAAQC,YAAauB,KAAKvB,cACrD,kBAAC,EAAD,CAAUqB,SAAUE,KAAKF,gB,GAjCfM,IAAMC,WCQJU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.b26686d0.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Ninjas = ({ ninjas, deleteNinja }) => {\n  const ninjaList = ninjas.map((ninja) => {\n    if (ninja.age > 20) {\n      return (\n        <div className=\"ninja\" key={ninja.id}>\n          <div> Name: {ninja.name}</div>\n          <div> Age: {ninja.age}</div>\n          <div> Belt: {ninja.belt}</div>\n          <button\n            onClick={() => {\n              deleteNinja(ninja.id);\n            }}\n          >\n            Delete\n          </button>\n          <hr></hr>\n        </div>\n      );\n    } else return null;\n  });\n  return <div className=\"ninja-list\">{ninjaList}</div>;\n};\n\nexport default Ninjas;\n","import React from \"react\";\n\nclass AddNinja extends React.Component {\n  state = { name: null, age: null, belt: null };\n  handleChange = (e) => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.newNinja(this.state);\n  };\n  render() {\n    return (\n      <div>\n        <h2> Add a ninja </h2>\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"name\">Name: </label>\n          <input type=\"text\" id=\"name\" onChange={this.handleChange} />\n          <label htmlFor=\"name\">Age: </label>\n          <input type=\"text\" id=\"age\" onChange={this.handleChange} />\n          <label htmlFor=\"name\">Belt: </label>\n          <input type=\"text\" id=\"belt\" onChange={this.handleChange} />\n          <button>Submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default AddNinja;\n","import React from \"react\";\nimport Ninjas from \"./ninjas\";\nimport AddNinja from \"./AddNinja\";\n\nclass App extends React.Component {\n  state = {\n    ninjas: [\n      { name: \"Ryu\", age: 27, belt: \"black\", id: 1 },\n      { name: \"Yoshi\", age: 23, belt: \"green\", id: 2 },\n      { name: \"Mario\", age: 20, belt: \"silver\", id: 3 },\n    ],\n  };\n  newNinja = (ninja) => {\n    ninja.id = Math.random();\n    let ninjas = [...this.state.ninjas, ninja];\n    this.setState({ ninjas: ninjas });\n  };\n\n  deleteNinja = (id) => {\n    let ninjas1 = this.state.ninjas.filter((ninja) => {\n      return ninja.id !== id;\n    });\n    this.setState({ ninjas: ninjas1 });\n  };\n  componentDidMount() {\n    console.log(\"component mounted\");\n  }\n  componentDidUpdate(prevProp, prevState) {\n    console.log(\"component updated\");\n    console.log(prevProp, prevState);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Ninja Database</h1>\n        <p>Active Ninjas</p>\n        <Ninjas ninjas={this.state.ninjas} deleteNinja={this.deleteNinja} />\n        <AddNinja newNinja={this.newNinja} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}